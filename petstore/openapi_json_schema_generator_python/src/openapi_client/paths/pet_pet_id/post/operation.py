# coding: utf-8

"""
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from openapi_client import api_client, security_schemes
from openapi_client.shared_imports.operation_imports import *

from .. import path
from .responses import response_405
from . import request_body
from .parameters import parameter_0
from .security import security_requirement_object_0



class RequestPathParameters:
    RequiredParams = typing_extensions.TypedDict(
        'RequiredParams',
        {
            'petId': typing.Union[parameter_0.Parameter0.schema, decimal.Decimal, int],
        }
    )
    OptionalParams = typing_extensions.TypedDict(
        'OptionalParams',
        {
        },
        total=False
    )


    class Params(RequiredParams, OptionalParams):
        pass


    parameters = (
        parameter_0.Parameter0,
    )
_security: typing.List[security_schemes.SecurityRequirementObject] = [
    security_requirement_object_0.security_requirement_object,
]


__StatusCodeToResponse = typing_extensions.TypedDict(
    '__StatusCodeToResponse',
    {
        '405': typing.Type[response_405.ResponseFor405],
    }
)
_status_code_to_response: __StatusCodeToResponse = {
    '405': response_405.ResponseFor405,
}


class BaseApi(api_client.Api):
    @typing.overload
    def _update_pet_with_form(
        self,
        content_type: typing_extensions.Literal["application/x-www-form-urlencoded"] = ...,
        body: typing.Union[
            request_body.RequestBody.content["application/x-www-form-urlencoded"].schema,
            schemas.Unset,
            dict,
            frozendict.frozendict
        ] = schemas.unset,
        path_params: RequestPathParameters.Params = frozendict.frozendict(),
        security_index: typing.Optional[int] = None,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> api_client.ApiResponseWithoutDeserialization: ...
    @typing.overload
    def _update_pet_with_form(
        self,
        content_type: str = ...,
        body: typing.Union[
            request_body.RequestBody.content["application/x-www-form-urlencoded"].schema,
            schemas.Unset,
            dict,
            frozendict.frozendict
        ] = schemas.unset,
        path_params: RequestPathParameters.Params = frozendict.frozendict(),
        security_index: typing.Optional[int] = None,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _update_pet_with_form(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[
            request_body.RequestBody.content["application/x-www-form-urlencoded"].schema,
            schemas.Unset,
            dict,
            frozendict.frozendict
        ] = schemas.unset,
        path_params: RequestPathParameters.Params = frozendict.frozendict(),
        security_index: typing.Optional[int] = None,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _update_pet_with_form(
        self,
        content_type: str = ...,
        body: typing.Union[
            request_body.RequestBody.content["application/x-www-form-urlencoded"].schema,
            schemas.Unset,
            dict,
            frozendict.frozendict
        ] = schemas.unset,
        path_params: RequestPathParameters.Params = frozendict.frozendict(),
        security_index: typing.Optional[int] = None,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _update_pet_with_form(
        self,
        content_type: str = 'application/x-www-form-urlencoded',
        body: typing.Union[
            request_body.RequestBody.content["application/x-www-form-urlencoded"].schema,
            schemas.Unset,
            dict,
            frozendict.frozendict
        ] = schemas.unset,
        path_params: RequestPathParameters.Params = frozendict.frozendict(),
        security_index: typing.Optional[int] = None,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Updates a pet in the store with form data
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs(RequestPathParameters.Params, path_params)
        used_path = self._get_used_path(
            path,
            path_parameters=RequestPathParameters.parameters,
            path_params=path_params
        )
        _headers = self._get_headers()
        # TODO add cookie handling

        _fields, _body = self._get_fields_and_body(
            request_body=request_body.RequestBody,
            body=body,
            headers=_headers,
            content_type=content_type
        )
        host = self.api_client.configuration.get_server_url(
            'servers', server_index
        )
        security_requirement_object = self.api_client.configuration.get_security_requirement_object(
            'paths/' + path + '/post/security',
            _security,
            security_index
        )

        response = self.api_client.call_api(
            resource_path=used_path,
            method='post',
            host=host,
            headers=_headers,
            fields=_fields,
            body=_body,
            security_requirement_object=security_requirement_object,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            status = str(response.status)
            if status in _status_code_to_response:
                status: typing_extensions.Literal[
                    '405',
                ]
                api_response = _status_code_to_response[status].deserialize(
                    response, self.api_client.schema_configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        self._verify_response_status(api_response)

        return api_response


class UpdatePetWithForm(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId.snakeCase fn names
    update_pet_with_form = BaseApi._update_pet_with_form


class ApiForPost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names
    post = BaseApi._update_pet_with_form
