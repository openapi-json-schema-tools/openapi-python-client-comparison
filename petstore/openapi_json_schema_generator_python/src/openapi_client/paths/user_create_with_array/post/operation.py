# coding: utf-8

"""
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from openapi_client import api_client, security_schemes
from openapi_client.shared_imports.operation_imports import *

from .. import path
from .responses import response_default
from . import request_body
from .security import security_requirement_object_0


_security: typing.List[security_schemes.SecurityRequirementObject] = [
    security_requirement_object_0.security_requirement_object,
]


default_response = response_default.Default


class BaseApi(api_client.Api):
    @typing.overload
    def _create_users_with_array_input(
        self,
        body: typing.Union[
            request_body.RequestBody.content["application/json"].schema,
            list,
            tuple
        ],
        content_type: typing_extensions.Literal["application/json"] = ...,
        security_index: typing.Optional[int] = None,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> response_default.Default.response_cls: ...

    @typing.overload
    def _create_users_with_array_input(
        self,
        body: typing.Union[
            request_body.RequestBody.content["application/json"].schema,
            list,
            tuple
        ],
        content_type: str = ...,
        security_index: typing.Optional[int] = None,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> response_default.Default.response_cls: ...


    @typing.overload
    def _create_users_with_array_input(
        self,
        body: typing.Union[
            request_body.RequestBody.content["application/json"].schema,
            list,
            tuple
        ],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        security_index: typing.Optional[int] = None,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _create_users_with_array_input(
        self,
        body: typing.Union[
            request_body.RequestBody.content["application/json"].schema,
            list,
            tuple
        ],
        content_type: str = ...,
        security_index: typing.Optional[int] = None,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        response_default.Default.response_cls,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _create_users_with_array_input(
        self,
        body: typing.Union[
            request_body.RequestBody.content["application/json"].schema,
            list,
            tuple
        ],
        content_type: str = 'application/json',
        security_index: typing.Optional[int] = None,
        server_index: typing.Optional[int] = None,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Creates list of users with given input array
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path
        _headers = self._get_headers()
        # TODO add cookie handling

        _fields, _body = self._get_fields_and_body(
            request_body=request_body.RequestBody,
            body=body,
            headers=_headers,
            content_type=content_type
        )
        host = self.api_client.configuration.get_server_url(
            'servers', server_index
        )
        security_requirement_object = self.api_client.configuration.get_security_requirement_object(
            'paths/' + path + '/post/security',
            _security,
            security_index
        )

        response = self.api_client.call_api(
            resource_path=used_path,
            method='post',
            host=host,
            headers=_headers,
            fields=_fields,
            body=_body,
            security_requirement_object=security_requirement_object,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            api_response = default_response.deserialize(response, self.api_client.schema_configuration)

        self._verify_response_status(api_response)

        return api_response


class CreateUsersWithArrayInput(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId.snakeCase fn names
    create_users_with_array_input = BaseApi._create_users_with_array_input


class ApiForPost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names
    post = BaseApi._create_users_with_array_input
